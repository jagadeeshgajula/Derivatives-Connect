/*
 * IRDPeriod.cpp
 *
 *  Created on: 28-Aug-2010
 *      Author: vishist
 */

#include "IRDPeriod.h"
#include "IRDErrors.h"
#include "IRDTypes.h"



    IRDPeriod::IRDPeriod(IRDFrequency f) {
        switch (f) {
          case Once:
          case NoFrequency:
            // same as Period()
            units_ = Days;
            length_ = 0;
            break;
          case Annual:
            units_ = Years;
            length_ = 1;
            break;
          case Semiannual:
          case EveryFourthMonth:
          case Quarterly:
          case Bimonthly:
          case Monthly:
            units_ = Months;
            length_ = 12/f;
            break;
          case Biweekly:
          case Weekly:
            units_ = Weeks;
            length_ = 52/f;
            break;
          case Daily:
            units_ = Days;
            length_ = 1;
            break;
          default:
            QL_FAIL("unknown frequency (" << Integer(f));
        }
    }

    day,
    		week,
    		twoWeek,
    		month,
    		twoMonth,
    		quarter,
    		halfYear,

    IRDPeriod::IRDPeriod(IRDTenor t) {
           switch (t) {
             case null:
             case null:
               // same as Period()
               units_ = Days;
               length_ = 0;
               break;
             case year:
               units_ = Years;
               length_ = 1;
               break;
             case month:
             case :
             case Quarterly:
             case Bimonthly:
             case Monthly:
               units_ = Months;
               length_ = 12/f;
               break;
             case Biweekly:
             case Weekly:
               units_ = Weeks;
               length_ = 52/f;
               break;
             case day:
               units_ = Days;
               length_ = 1;
               break;
             default:
               QL_FAIL("unknown frequency (" << Integer(f));
           }
       }



    IRDFrequency IRDPeriod::frequency() const {
        // unsigned version
        Size length = std::abs(length_);

        if (length==0) return NoFrequency;

        switch (units_) {
          case Years:
            QL_REQUIRE(length==1,
                       "cannot instantiate a Frequency from " << *this);
            return Annual;
          case Months:
            QL_REQUIRE((12%length)==0 && length<=12,
                       "cannot instantiate a Frequency from " << *this);
            return IRDFrequency(12/length);
          case Weeks:
            if (length==1)
                return Weekly;
            else if (length==2)
                return Biweekly;
            else
                QL_FAIL("cannot instantiate a Frequency from " << *this);
          case Days:
            QL_REQUIRE(length==1,
                       "cannot instantiate a Frequency from " << *this);
            return Daily;
          default:
            QL_FAIL("unknown time unit (" << Integer(units_));
        }
    }

    IRDTenor IRDPeriod::tenor() const {
          // unsigned version
          Size length = std::abs(length_);

          if (length==0) return NoFrequency;

          switch (units_) {
            case Years:
              QL_REQUIRE(length==1,
                         "cannot instantiate a Frequency from " << *this);
              return Annual;
            case Months:
              QL_REQUIRE((12%length)==0 && length<=12,
                         "cannot instantiate a Frequency from " << *this);
              return IRDFrequency(12/length);
            case Weeks:
              if (length==1)
                  return Weekly;
              else if (length==2)
                  return Biweekly;
              else
                  QL_FAIL("cannot instantiate a Frequency from " << *this);
            case Days:
              QL_REQUIRE(length==1,
                         "cannot instantiate a Frequency from " << *this);
              return Daily;
            default:
              QL_FAIL("unknown time unit (" << Integer(units_));
          }
      }


    bool operator<(const IRDPeriod& p1, const IRDPeriod& p2) {
        if (p1.length()==0) return (p2.length()>0);
        if (p2.length()==0) return (p1.length()<0);

        switch (p1.units()) {
          case Days:
            switch (p2.units()) {
              case Days:
                return (p1.length() < p2.length());
              case Weeks:
                return (p1.length() < p2.length() * 7);
              case Months:
                if (p1.length() < p2.length() * 28)
                    return true;
                else
                    QL_FAIL("undecidable comparison between "
                             << p1 << " and " << p2);
              case Years:
                return (p1.length() < p2.length() * 365);
              default:
                QL_FAIL("unknown units");
            }
          case Weeks:
            switch (p2.units()) {
              case Days:
                return (p1.length() * 7 < p2.length());
              case Weeks:
                return (p1.length() < p2.length());
              case Months:
                if (p1.length() * 7 < p2.length() * 28)
                    return true;
                else
                    QL_FAIL("undecidable comparison between "
                             << p1 << " and " << p2);
              case Years:
                if (p1.length() * 7 < p2.length() * 365)
                    return true;
                else
                    QL_FAIL("undecidable comparison between "
                             << p1 << " and " << p2);
              default:
                QL_FAIL("unknown units");
            }
          case Months:
            switch (p2.units()) {
              case Days:
                // Sup[days in p1.length() months] < days in p2
                if (p1.length() * 31 < p2.length())
                    return true;
                // almost 28 days in p1 and less than 28 days in p2
                else if ((p1.length()!=0) && p2.length()< 28)
                    return false;
                else
                    QL_FAIL("undecidable comparison between "
                             << p1 << " and " << p2);
              case Weeks:
                if (p1.length()* 31 < p2.length()  * 7)
                    return true;
                else
                    QL_FAIL("undecidable comparison between "
                             << p1 << " and " << p2);
              case Months:
                return (p1.length() < p2.length());
              case Years:
                return (p1.length() < p2.length() * 12);
              default:
                QL_FAIL("unknown units");
            }
          case Years:
            switch (p2.units()) {
              case Days:
                if (p1.length() * 366 < p2.length())
                    return true;
                // almost 365 days in p1 and less than 365 days in p2
                else if ((p1.length()!=0) && p2.length()< 365)
                    return false;
                else
                    QL_FAIL("undecidable comparison between "
                             << p1 << " and " << p2);
              case Weeks:
                if (p1.length() * 366 < p2.length() * 7)
                    return true;
                else
                    QL_FAIL("undecidable comparison between "
                             << p1 << " and " << p2);
              case Months:
                return (p1.length() * 12 < p2.length());
              case Years:
                return (p1.length() < p2.length());
              default:
                QL_FAIL("unknown units");
            }
          default:
            QL_FAIL("unknown units");
        }
    }

    // period formatting

    std::ostream& operator<<(std::ostream& out, const IRDPeriod& p) {
        return out << IRDio::short_period(p);
    }

    namespace IRDdetail {

        std::ostream& operator<<(std::ostream& out,
                                 const long_period_holder& holder) {
            Integer n = holder.p.length();
            out << n << " ";
            switch (holder.p.units()) {
              case Days:
                return out << (n == 1 ? "day" : "days");
              case Weeks:
                return out << (n == 1 ? "week" : "weeks");
              case Months:
                return out << (n == 1 ? "month" : "months");
              case Years:
                return out << (n == 1 ? "year" : "years");
              default:
                QL_FAIL("unknown time unit");
            }
        }

        std::ostream& operator<<(std::ostream& out,
                                 const short_period_holder& holder) {
            Integer n = holder.p.length();
            out << n;
            switch (holder.p.units()) {
              case Days:
                return out << "D";
              case Weeks:
                return out << "W";
              case Months:
                return out << "M";
              case Years:
                return out << "Y";
              default:
                QL_FAIL("unknown time unit");
            }
        }

    }

    namespace IRDio {

        IRDdetail::long_period_holder long_period(const IRDPeriod& p) {
            return IRDdetail::long_period_holder(p);
        }

        IRDdetail::short_period_holder short_period(const IRDPeriod& p) {
            return IRDdetail::short_period_holder(p);
        }

    }



