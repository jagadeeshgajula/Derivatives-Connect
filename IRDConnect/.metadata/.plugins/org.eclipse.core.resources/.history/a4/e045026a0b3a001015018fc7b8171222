/*
 * fixingRates.cpp
 *
 *  Created on: 12-Nov-2010
 *      Author: vishist
 */

#include <iostream>
#include <fstream>
#include "fixingRates.h"
#include "period.h"
#include "busDayConv.h"
#include "linearInterpolation.h"
#include "calendarUtil.h"

using namespace std;
using namespace IRDConnect;

FixingRates::FixingRates(

Date 		currentDate,
String 		lastModifiedBy,
String 		lastVerifiedBy,
Date 		modifiedTimestamp,
Date 		quoteDate,
String 		quoteId,
String 		quoteType,
double		rate,
String 		ratesetMode,
Date 		verifiedTimestamp )

{


_currentDate  		= 	currentDate;
_lastModifiedBy		=	lastModifiedBy;
_lastVerifiedBy     =	lastVerifiedBy;
_modifiedTimestamp	=	modifiedTimestamp;
_quoteDate			=	quoteDate;
_quoteId			=	quoteId;
_quoteType			=	quoteType;
_rate				=	rate;
_ratesetMode		=	ratesetMode;
_verifiedTimestamp	=	verifiedTimestamp;

}

FixingRates::~FixingRates()
{
	//do nothing
}

void FixingRates::init()
{

	FixingRates fixingRates;

	//int noOfResets = 1; ===== need to enable letter if needed
	// rate = 0.05;

	_fixingRatesList.clear();

	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(15,10,2010));
	fixingRates.setQuoteType("RATE");
	fixingRates.setRate(0.79059);

	_fixingRatesList.push_back(fixingRates);

	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(17,1,2011));
	fixingRates.setQuoteType("RATE");
	fixingRates.setRate(0.86368);

	_fixingRatesList.push_back(fixingRates);

	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(15,4,2011));
	fixingRates.setQuoteType("RATE");
	fixingRates.setRate(0.99514);

	_fixingRatesList.push_back(fixingRates);


	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(15,7,2011));
	fixingRates.setQuoteType("RATE");
	fixingRates.setRate(1.17508);

	_fixingRatesList.push_back(fixingRates);


	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(17,10,2011));
	fixingRates.setQuoteType("RATE");
	fixingRates.setRate(1.34175);

	_fixingRatesList.push_back(fixingRates);


	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(16,1,2012));
	fixingRates.setQuoteType("RATE");
	fixingRates.setRate(1.53650);

	_fixingRatesList.push_back(fixingRates);


	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(10,12,2010));
	fixingRates.setRate(0.82589);

	_fixingRatesList.push_back(fixingRates);

	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(10,3,2011));
	fixingRates.setRate(0.93683);

	_fixingRatesList.push_back(fixingRates);

	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(10,6,2011));
	fixingRates.setRate(1.09177);

	_fixingRatesList.push_back(fixingRates);

	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(12,9,2011));
	fixingRates.setRate(1.27295);

	_fixingRatesList.push_back(fixingRates);

	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(12,12,2011));
	fixingRates.setRate(1.47784);

	_fixingRatesList.push_back(fixingRates);

	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(12,3,2012));
	fixingRates.setRate(1.67143);

	_fixingRatesList.push_back(fixingRates);

	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(11,6,2012));
	fixingRates.setRate(1.90321);

	_fixingRatesList.push_back(fixingRates);

	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(10,9,2012));
	fixingRates.setRate(2.15662);


	_fixingRatesList.push_back(fixingRates);

	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(16,4,2012));
	fixingRates.setQuoteType("RATE");
	fixingRates.setRate(1.75888);

	_fixingRatesList.push_back(fixingRates);


	fixingRates.setQuoteId("GBPDOM_3M.T3750");
	fixingRates.setQuoteDate(Date(16,7,2012));
	fixingRates.setQuoteType("RATE");
	fixingRates.setRate(2.00172);

	_fixingRatesList.push_back(fixingRates);


	fixingRates.setQuoteId("GBPDOM_1M.T3750");
	fixingRates.setQuoteDate(Date(15,10,2012));
	fixingRates.setQuoteType("RATE");
	fixingRates.setRate(1.90664);

	_fixingRatesList.push_back(fixingRates);

	fixingRates.setQuoteId("GBPDOM_2M.T3750");
	fixingRates.setQuoteDate(Date(15,10,2012));
	fixingRates.setQuoteType("RATE");
	fixingRates.setRate(2.21033);

	_fixingRatesList.push_back(fixingRates);


	// 6m GBP rates

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(15,10,2010));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.02625);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(11,4,2011));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.31088);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(15,4,2011));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.29072);

		_fixingRatesList.push_back(fixingRates);


		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(10,10,2011));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.65832);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(17,10,2011));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.79076);

		_fixingRatesList.push_back(fixingRates);


		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(10,4,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.09532);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(16,4,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.36515);

		_fixingRatesList.push_back(fixingRates);
		fixingRates.setQuoteId("GBPDOM_2M.T3750");
		fixingRates.setQuoteDate(Date(8,10,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.19241);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_3M.T3750");
		fixingRates.setQuoteDate(Date(15,10,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.45130);

		_fixingRatesList.push_back(fixingRates);


		// few more fixings

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(10,12,2010));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.11690);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(16,03,2011));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.25714);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(18,4,2011));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.32411);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(10,06,2011));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.41515);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(21,9,2011));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.62153);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(12,12,2011));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.80717);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(21,03,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.04596);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(17,04,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.11345);

		_fixingRatesList.push_back(fixingRates);


		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(11,6,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.25962);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_1M.T3750");
		fixingRates.setQuoteDate(Date(17,10,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.91441);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_2M.T3750");
		fixingRates.setQuoteDate(Date(17,10,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.21279);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_1M.T3750");
		fixingRates.setQuoteDate(Date(15,10,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.21422);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(19,9,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.51517);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_2M.T3750");
		fixingRates.setQuoteDate(Date(15,10,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.51768);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_3M.T3750");
		fixingRates.setQuoteDate(Date(19,9,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.18032);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_2M.T3750");
		fixingRates.setQuoteDate(Date(15,10,2010));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(0.78165);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(9,12,2011));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(1.80132);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(8,6,2012));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(2.25438);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_3M.T3750");
		fixingRates.setQuoteDate(Date(19,10,2010));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(0.79265);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_3M.T3750");
		fixingRates.setQuoteDate(Date(15,10,2010));
		fixingRates.setQuoteType("RATE");
		fixingRates.setRate(0.79059);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBP/USD_BOESAF");
		fixingRates.setQuoteDate(Date(15,10,2010));
		fixingRates.setQuoteType("PRICE");
		fixingRates.setRate(1.516);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBP/USD_BOESAF");
		fixingRates.setQuoteDate(Date(15,04,2011));
		fixingRates.setQuoteType("PRICE");
		fixingRates.setRate(1.520);

		_fixingRatesList.push_back(fixingRates);


		fixingRates.setQuoteId("GBP/USD_BOESAF");
		fixingRates.setQuoteDate(Date(17,10,2011));
		fixingRates.setQuoteType("PRICE");
		fixingRates.setRate(1.612);

		_fixingRatesList.push_back(fixingRates);


		fixingRates.setQuoteId("GBP/USD_BOESAF");
		fixingRates.setQuoteDate(Date(16,04,2012));
		fixingRates.setQuoteType("PRICE");
		fixingRates.setRate(1.630);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBP/USD_BOESAF");
		fixingRates.setQuoteDate(Date(15,10,2012));
		fixingRates.setQuoteType("PRICE");
		fixingRates.setRate(1.638);

		_fixingRatesList.push_back(fixingRates);

/*

	while ( noOfResets != 1000 )
	{
		rate = rate + 0.0005;



		fixingRates.setQuoteId("GBPDOM_6M.T3750");
		fixingRates.setQuoteDate(Date(11,10,2010) + Period(noOfResets,Days));
		fixingRates.setRate(rate + 0.002);

		_fixingRatesList.push_back(fixingRates);

		fixingRates.setQuoteId("GBPDOM_1M.T3750");
		fixingRates.setQuoteDate(Date(11,10,2010) + Period(noOfResets,Days));
		fixingRates.setRate(rate - 0.001);

		_fixingRatesList.push_back(fixingRates);


		fixingRates.setQuoteId("GBPDOM_2M.T3750");
		fixingRates.setQuoteDate(Date(11,10,2010) + Period(noOfResets,Days));
		fixingRates.setRate(rate + 0.0005);

		_fixingRatesList.push_back(fixingRates);
		noOfResets++;

	}

*/
	// only when we need to debug
	/*
			std::list < FixingRates > ::iterator iterFixingRates = FixingRates::getFixingRatesList().begin () ;

					int resetsCnt = FixingRates::getFixingRatesList().size();
					logFile << "No of Elements are :" << resetsCnt;


			         for ( ; iterFixingRates != FixingRates::getFixingRatesList().end () ; ++iterFixingRates )
			         {

			        	 logFile << "Fixing Rates are : ";
			        	 logFile << iterFixingRates->getQuoteId() << " : " <<  iterFixingRates->getQuoteDate() << " : " << iterFixingRates->getRate() << endl;
			         }

   */

}

double FixingRates::getFixingRate( Date date, String quoteId)
{

	std::list < FixingRates > ::iterator iterFixingRates = FixingRates::getFixingRatesList().begin () ;

						//int resetsCnt = FixingRates::getFixingRatesList().size();
						//logFile << "No of Elements are :" << resetsCnt << endl;;


				         for ( ; iterFixingRates != FixingRates::getFixingRatesList().end () ; ++iterFixingRates )
				         {

				        	 if ( iterFixingRates->getQuoteDate() == date &&  iterFixingRates->getQuoteId() == quoteId )
				        	 {
				        		 //logFile << "Fixing Quote, Date and Rate are : ";
				        		 //logFile << iterFixingRates->getQuoteId() << " : " << iterFixingRates->getQuoteDate() << " : " << iterFixingRates->getRate() << endl;
				        		 if ( iterFixingRates->getQuoteType() == "RATE" )
				        			 return iterFixingRates->getRate()/100;
				        		 else
				        			 return iterFixingRates->getRate();
				        	 }
				         }
return -1.0; // rate not present

}

double FixingRates::getFixingRate( Date quoteDate, String stubAIndex, String stubBIndex, Period ATenor, Period BTenor,
		Date couponStartDate, Date couponEndDate, const BusDayConv * busDay )
{

	std::list < FixingRates > ::iterator iterFixingRates = FixingRates::getFixingRatesList().begin () ;

						int resetsCnt = FixingRates::getFixingRatesList().size();
						logFile << "No of Elements are :" << resetsCnt << endl;
						double stubARate = 0.0;
						double stubBRate = 0.0;
						double stubRate = 0.0; // interpolated rate
						bool needInterpolation = true;



				        for ( ; iterFixingRates != FixingRates::getFixingRatesList().end () ; ++iterFixingRates )
				        {

				        	 if ( iterFixingRates->getQuoteDate() == quoteDate &&  iterFixingRates->getQuoteId() == stubAIndex )
				        	 {
				        		 logFile << "Fixing STUB A Quote, Date and Rate are : ";
				        		 logFile << iterFixingRates->getQuoteId() << " : " << iterFixingRates->getQuoteDate() << " : " << iterFixingRates->getRate() << endl;
				        		 stubARate = iterFixingRates->getRate()/100;

				        	 }
				        	 else if ( iterFixingRates->getQuoteDate() == quoteDate &&  iterFixingRates->getQuoteId() == stubBIndex )
				        	{
				        			logFile << "Fixing STUB B Quote, Date and Rate are : ";
				        			logFile << iterFixingRates->getQuoteId() << " : " << iterFixingRates->getQuoteDate() << " : " << iterFixingRates->getRate() << endl;
				        			stubBRate = iterFixingRates->getRate()/100;
				        	}
				        	 else if ( stubAIndex == stubBIndex && ( iterFixingRates->getQuoteDate() == quoteDate ) )
				        	{
				        			stubRate = iterFixingRates->getRate()/100; // no interpolation needed
				        			needInterpolation = false;
				        			logFile << "Fixing Quote, Date and Rate are : ";
				        			logFile << iterFixingRates->getQuoteId() << " : " << iterFixingRates->getQuoteDate() << " : " << iterFixingRates->getRate() << endl;
				        			return stubRate; // khatham

				        	}
				        }

				  if ( needInterpolation )
				  {
					  std::set < std::string > _stubCals;

					  _stubCals.insert("LON");

					  //const std::string busDayTmp = "MOD" ;
					  //const BusDayConv * stubBusDay = BusDayConv::find(busDayTmp);

					  Date startDate = busDay->adjustToBusDay(couponStartDate + ATenor, *CalendarUtil::getCalendar(_stubCals));

					  long startDays = startDate.serialNumber();

					  Date endDate = busDay->adjustToBusDay(couponStartDate + BTenor, *CalendarUtil::getCalendar(_stubCals));

					  long endDays = endDate.serialNumber();

					  long stubDays = couponEndDate.serialNumber();

					  logFile << "stub Dates : " << startDate << " : " << endDate << " : " << couponEndDate << endl;

	    		          std::vector<long> stubs ;

				          stubs.push_back ( startDays ) ;
				          stubs.push_back ( endDays ) ;

				          std::vector<double> stubRates ;
				          stubRates.push_back ( stubARate ) ;
				          stubRates.push_back ( stubBRate ) ;

				          for ( int i=0 ;i<stubs.size(); i++)
				          {
				        	  logFile << "I " <<i << " Days " << stubs[i] << "  : " << stubRates[i]  << endl ;
				          }


				          LinearInterpolation<long, double> interPol ( stubs, stubRates );

				          double r = interPol( stubDays);

				          logFile << stubDays <<  " Interpolated Rate is : " << r << endl;

				          return r; // return the value

				  }

return -1.0; // rate not present

}

String FixingRates::getFixingQuote( String index, Period stubTenor)
{
	if ( stubTenor.units() == Months && stubTenor.length() == 1)
		return "GBPDOM_1M.T3750";
	else if ( stubTenor.units() == Months && stubTenor.length() == 2)
		return "GBPDOM_2M.T3750";
	else if ( stubTenor.units() == Months && stubTenor.length() == 3)
			return "GBPDOM_3M.T3750";
	else if ( stubTenor.units() == Months && stubTenor.length() == 4)
			return "GBPDOM_4M.T3750";
	else if ( stubTenor.units() == Months && stubTenor.length() == 5)
			return "GBPDOM_5M.T3750";
	else if ( stubTenor.units() == Months && stubTenor.length() == 6)
			return "GBPDOM_6M.T3750";
	else if ( stubTenor.units() == Weeks && stubTenor.length() == 1)
			return "GBPDOM_1W.T3750";
	else if ( stubTenor.units() == Weeks && stubTenor.length() == 2)
			return "GBPDOM_2W.T3750";
	else if ( stubTenor.units() == Months && stubTenor.length() == 3)
			return "GBPDOM_3W.T3750";
	else if ( stubTenor.units() == Days && stubTenor.length() == 2)
			return "GBPDOM_2D.T3750";
	else
		return index;

}
