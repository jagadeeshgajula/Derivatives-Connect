/*
 * fraTicket.cpp
 *
 *  Created on: 26-Sep-2010
 *      Author: vishist
 */

#include <iostream>
#include "fraTicket.h"
#include "rollDayConv.h"
#include "calendarUtil.h"
#include "frequency.h"
#include "marchingConv.h"
#include "fixingRates.h"
#include "paySchedule.h"
#include <set>
#include <list>
#include  <boost/shared_ptr.hpp>
#include <boost/lexical_cast.hpp>
#include <stdlib.h>
#include "util.h"

using namespace std ;
using namespace boost;
using namespace IRDConnect;
using namespace IRDdetail;


FraTicket::FraTicket()
{
	// do nothing
}

FraTicket::FraTicket (
		String   		alternateRef,
		String  		bookingType,
		String  		customerAccount,
		Date  			earlyTermDate,
		String  		earlyTermReason,
		String  		externalSystem,
		String  		externalRef,
		String  		firmAccount,
		String  		flowStatus,
		String  		lastModifiedBy,
		String  		lastVerifiedBy,
		String  		legalEntity,
		String  		location,
		String  		matchingStatus,
		Date  			maturityDate,
		String  		modifiedTimeStamp,
		String  		operationsRef,
		String  		originalTradeRef,
		String  		productType,
		String  		salesPerson,
		Date  			startDate,
		String  		subType,
		Date  			tradeDate,
		String  		trader,
		String  		tradeRef,
		String			tradeRemarks,
		String  		tradeStatus,
		String  		tradeType,
		double  		tradeVersion,
		String  		verifiedTimeStamp,
		String  		washAccount, // trade ticket until here
const Currency * 			currency,
String buySell, // BUY or SELL
double 			notional, // fra specific starts here
Date 			settlementDate,
int 			quoteLag,
Date 			quoteDate,
std::set < std::string > 			payCalendars,
const BusDayConv * 	busDayConv,
double 			agreedRate,
String 			resetType,
String 			rateType,
double 			manualRate,
String 			marketIndex,
const DayCountConv * 	dayCount,
std::set < std::string > 			quoteCalendars,
String 			discountCurve,
String 			paymentConvention,
String 			resetConvention)

	: TradeTicket	  (		alternateRef,
							bookingType,
							customerAccount,
							earlyTermDate,
							earlyTermReason,
							externalSystem,
							externalRef,
							firmAccount,
							flowStatus,
					 	 	lastModifiedBy,
					 	 	lastVerifiedBy,
					 	 	legalEntity,
					 	 	location,
					 	 	matchingStatus,
					 	 	maturityDate,
					 	 	modifiedTimeStamp,
					 	 	operationsRef,
					 	 	originalTradeRef,
					 	 	productType,
					 	 	salesPerson,
					 	 	startDate,
					 	 	subType,
					 	 	tradeDate,
					 	 	trader,
					 	 	tradeRef,
					 	 	tradeRemarks,
					 	 	tradeStatus,
					 	 	tradeType,
					 	 	tradeVersion,
					 	 	verifiedTimeStamp,
					 	 	washAccount )
{
_currency			=	currency;
_buySell			=	buySell;
_notional			=	notional;
_settlementDate		=	settlementDate;
_quoteLag			=	quoteLag;
_quoteDate			=	quoteDate;
_payCalendars		=	payCalendars;
_busDayConv			=	busDayConv;
_agreedRate			=	agreedRate;
_resetType			=	resetType;
_rateType			=	rateType;
_manualRate			=	manualRate;
_marketIndex		=	marketIndex;
_dayCount			=	dayCount;
_quoteCalendars		=	quoteCalendars;
_discountCurve		=	discountCurve;
_paymentConvention	=	paymentConvention;
_resetConvention	=	resetConvention;
}

FraTicket::~FraTicket()
{
	// do nothing
}


bool FraTicket::genPaySchedule()
{

	// let us calculate Quote Date

	int lagSign = getQuoteLag() >= 0 ? 1 : -1;
	logFile << "lag sign is : " << lagSign << endl;
	const BusDayConv * resetBusDay = lagSign > 0 ? BusDayConv::find("FOL") : BusDayConv::find("PRE") ;
	int lag = getQuoteLag() * lagSign;
	logFile << "lag is : " << lag << endl;

	Date quoteDate = getStartDate();

	int cntReset = lag;

	while ( cntReset > 0 )
	{
		Period period(lagSign * 1,Days);
		quoteDate = quoteDate + period;
		quoteDate = resetBusDay->adjustToBusDay(quoteDate,*CalendarUtil::getCalendar(getQuoteCalendars()) );
		cntReset--;

	}

	if (  cntReset == 0 )
		quoteDate = resetBusDay->adjustToBusDay(quoteDate,*CalendarUtil::getCalendar(getQuoteCalendars()) );

	logFile << "Quote Date is : " << quoteDate << endl;

	setQuoteDate(quoteDate);

	shared_ptr <ResetSchedule> resetSchedule( new ResetSchedule());

	resetSchedule->setResetStartDate(getStartDate());
	resetSchedule->setQuoteDate(quoteDate);

	if ( getManualRate() != -1 )
		resetSchedule->setRateType("MANUAL"); // rate is manually set
	else if ( FixingRates::getFixingRate(quoteDate, resetSchedule->getResetStartDate(), getMarketIndex()) == 0.0
			&& quoteDate < Date::todaysDate() )
		resetSchedule->setRateType("HISTORIC");
	else if ( FixingRates::getFixingRate(quoteDate, resetSchedule->getResetStartDate(), getMarketIndex()) != 0.0
			&& quoteDate <= Date::todaysDate() )
		resetSchedule->setRateType("RATESET");
	else if ( quoteDate >= Date::todaysDate() )
		resetSchedule->setRateType("PROJECTED");

	if ( getManualRate() == -1 )
			resetSchedule->setRate(FixingRates::getFixingRate(quoteDate,resetSchedule->getResetStartDate(), getMarketIndex()));
		else
			resetSchedule->setRate(getManualRate()/100 );

	resetSchedule->setRateIndexType("IRRATE"); // FRAs are with only IRD rate - no FX

	_fraResetScheduleList.push_back(resetSchedule);

	RollDayConv  * rollDayConv = new RollDayConv();


	DateMarcher::GenSchedule  genScheduleFra;

	const DateMarcher * fraMarcher = DateMarcher::find("_forward");

	logFile << "Start and End Dates " << getStartDate() << " : " << getMaturityDate() << " : " << getBusDayConv() << endl;

		if ( fraMarcher->genSchedule (
		getStartDate(),
		getMaturityDate(),
		Frequency(Annual), // FRA has got only one coupon - let us set it to 1 year thinking fra never goes beyond this.
		*CalendarUtil::getCalendar(getPayCalendars()),
		getBusDayConv(),
		genScheduleFra,
		0,  //evenFinalPeriod,
		rollDayConv  ) )
		{

			 genScheduleFra.getEventList().sort(); // for backward dates come in reverse order, so need to order ascending order.

			 std::list<Date>::const_iterator iterEvent = genScheduleFra.getEventList().begin () ;

				int noOfEvents = genScheduleFra.getEventList().size();
				logFile << "No of Elements are front :" << noOfEvents << endl;
				int cnt = 0;

			    for ( ; iterEvent != genScheduleFra.getEventList().end () ; ++iterEvent )
			      {
			        shared_ptr <PaySchedule> paySchedule( new PaySchedule());

			        cnt++;

			        if ( cnt != noOfEvents )
			        {

			        	paySchedule->setCouponStartDate(*iterEvent);
			        	paySchedule->setCouponEndDate(*(++iterEvent));
			        	paySchedule->setPaymentDate(getBusDayConv()->adjustToBusDay(paySchedule->getCouponEndDate(), *CalendarUtil::getCalendar(getPayCalendars())) );
			        	//paySchedule->setPaymentType("Coupon");
			        	paySchedule->setNotional(getNotional());
			        	 --iterEvent;

			        	double amount = 0.0 ;

			        	if ( getRateType() == "ADD_ON" )
			        	{

			        		amount = getNotional() * (getDayCount()->getFraction( paySchedule->getCouponStartDate(),
			        			paySchedule->getCouponEndDate(), false,false,(int) Frequency(Quarterly) ))
			        			* ( getPeriodRate() - getAgreedRate()/100);

			        		double pcfraction =  1 / (1 + getPeriodRate() *
			        				getDayCount()->getFraction( paySchedule->getCouponStartDate(),
			        			paySchedule->getCouponEndDate(), false,false,(int) Frequency(Quarterly)  ) );

			        		amount = amount * pcfraction ;

			        		//cout << getQuoteDate() << getAgreedRate()/100 << getDayCount()->getFraction( paySchedule->getCouponStartDate(),
			        			//paySchedule->getCouponEndDate(), false,false,(int) Frequency(Quarterly) ) << getMarketIndex()
			        			//<< getPeriodRate()  << endl;
			        	}
			        	else if ( getRateType() == "SIMPLE" )
			        	{
			        		amount = getNotional() * getDayCount()->getFraction( paySchedule->getCouponStartDate(),
			        			paySchedule->getCouponEndDate(), false,false,(int) Frequency(Quarterly) ) *
			        			( getPeriodRate() - getAgreedRate()/100);

			        	}
			        	else if ( getRateType() == "DISCOUNT" )
			        	{
			        		double pcfractionAgreed = 	1 / (1 + ( getAgreedRate()/100 *
			        				getDayCount()->getFraction( paySchedule->getCouponStartDate(),
			        				paySchedule->getCouponEndDate(), false,false,(int) Frequency(Quarterly) ) ));


			        		double pcfractionSettle = 	 1 / (1 + getPeriodRate() *
			        				getDayCount()->getFraction( paySchedule->getCouponStartDate(),
			        				paySchedule->getCouponEndDate(), false,false,(int) Frequency(Quarterly) ) );

			        		amount = getNotional() * ( pcfractionAgreed - pcfractionSettle );


			        	}


			        		paySchedule->setAmount( getBuySell() == "BUY" ? amount : -1 * amount);

			        		_fraPayScheduleList.push_back(paySchedule);
			        }

			       }
		}

				PayScheduleList::const_iterator iterFra = getPayScheduleList().begin();

				         for ( ; iterFra != getPayScheduleList().end() ; ++iterFra )
				         {

				        	 logFile << "PaySchedule list " << endl;
				        	 logFile <<"Start Date : " << (*iterFra)->getCouponStartDate() << endl;
				        	 logFile << "End Date : " << (*iterFra)->getCouponEndDate() << endl;
				        	 logFile << "Payment Date : " << (*iterFra)->getPaymentDate() << endl;
				        	 logFile << "Payment Amount : " << (*iterFra)->getAmount() << endl;
				        	 logFile << endl;
				         }

return true;

}

double FraTicket::getPeriodRate()
{
	if ( getManualRate() != -1 ) // if manual - send that rate as it should be same in resetSchedule
		return getManualRate()/100;
	else
	{
		ResetScheduleList::const_iterator Resets = getResetScheduleList().begin();

		for (; Resets != getResetScheduleList().end(); ++Resets )
		{
			return (*Resets)->getRate();
		}


	}
	return 0.0; // never should come here
}

double FraTicket::calculateTotalPV()
{

	double pv = 0.0;

		Date curveDate(19,12,2011) ;
		//CurveCache & c = CurveCache::instance() ;
		boost::shared_ptr<IRDConnect::Curve>  curvePtr = CurveCache::instance().find(curveDate, "GBPLIBOR") ;

		AdditionalPaymentsList::const_iterator iterEvent = getAdditionalPayments().begin () ;
		for ( ; iterEvent != getAdditionalPayments().end () ; ++iterEvent )
		{

			pv += (*iterEvent)->getAmount() * curvePtr->getZcdf((*iterEvent)->getPaymentDate());

		}

		PayScheduleList::const_iterator iterFra = getPayScheduleList().begin();

		for ( ; iterFra != getPayScheduleList().end() ; ++iterFra )
		{
			pv +=  curvePtr->getZcdf((*iterFra)->getPaymentDate()) *  (*iterFra)->getAmount();
		}

	return pv;
}
